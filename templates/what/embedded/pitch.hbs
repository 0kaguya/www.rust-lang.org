<section id="embedded-why-rust" class="background-green">
  <div class="container">
    <header>
      <h2>Why Rust for Embedded Development?</h2>
      <div class="highlight highlight-purple"></div>
    </header>
    <div class="row">
      <div class="four columns" id="powerful-static-analysis">
        <div class="domain-icon">
          <img src="/static/images/microscope.svg" alt="A microscope"/>
          <h3>Powerful static analysis</h3>
        </div>
        <p>
          Rust's type system lets you enforce pin and peripheral configuration at compile time. Its ownership system guarantees that resources won't be used by unintended parts of the application.
          <a href="https://github.com/rust-lang-nursery/embedded-wg/issues/118">Learn more</a>
        </p>
      </div>
      <div class="four columns" id="flexible-memory-management">
        <div class="domain-icon">
          <img src="/static/images/ram-memory.svg" alt="A RAM stick"/>
          <h3>Flexible Memory Management</h3>
        </div>
        <p>
          Dynamic memory (heap) allocation is optional. Use a global allocator and dynamic data structures from the Rust standard library. Or leave out heap allocation altogether and statically allocate everything.
          <a href="https://github.com/rust-lang-nursery/embedded-wg/issues/125">Learn more</a>
        </p>
      </div>
      <div class="four columns" id="safe-concurrency">
        <div class="domain-icon">
          <img src="/static/images/gears.svg" alt="Gears"/>
          <h3>Safe Concurrency</h3>
        </div>
        <p>
          Rust's memory safety holds regardless of the concurrency framework. Be it threads with explicit shared memory or tasks with message passing.
          <a href="https://github.com/rust-lang-nursery/embedded-wg/issues/124">Learn more</a>
        </p>
      </div>
    </div>
    <div class="row">
      <div class="four columns" id="Interoperability">
        <div class="domain-icon">
          <img src="/static/images/handshake.svg" alt="Handshake" />
          <h3>Interoperability</h3>
        </div>
        <p>
          Integrate Rust into your existing C codebase or leverage an existing SDK to write a Rust application.
          <a href="https://github.com/rust-lang-nursery/embedded-wg/issues/48">Learn more</a>
        </p>
      </div>
      <div class="four columns" id="portability">
        <div class="domain-icon">
          <img src="/static/images/luggage.svg" alt="Luggage trolley" />
          <h3>Portability</h3>
        </div>
        <p>
          Write a library / driver once and use it with a variety of systems ranging from very small microcontrollers to powerful SBCs.
          <a href="https://github.com/rust-lang-nursery/embedded-wg/issues/119">Learn more</a>
        </p>
      </div>
      <div class="four columns">
        <div class="domain-icon">
          <img src="/static/images/cli-rustc-approved.svg" alt="Shield Logo" />
          <h3>Community Driven</h3>
        </div>
        <p>
          As part of the Rust open source project, support for embedded systems is driven by a best-in-class open source community, with support from commercial partners.
          <a href="https://github.com/rust-embedded/wg">Learn more</a>
        </p>
      </div>
    </div>
  </div>
</section>