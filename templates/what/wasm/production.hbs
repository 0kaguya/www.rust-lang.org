<section id="wasm-production-use">
    <div class="container">
        <header>
            <h2>Production Use</h2>
            <div class="highlight highlight-green"></div>
        </header>
        <div class="testimonials">
            <div class="testimonial row">
                <div class="four columns">
                    <a href="https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/">
                        <img src="https://ucc07b4a6f7dce2bca4c5ff762a1.previews.dropboxusercontent.com/p/thumb/AAJGSN9OJyk-hrFWzjySLSC_RH-a57cOouIjHMBPMhEQmqqrZFJsA6oJSw9Pxqoa_WE4-Lc_RYZ08GzhusUlq9d2LviOQduExeH3yJJ0GlVxUXSED9J1nG2KHovqtP9DBvFuEWY1GdTVJVuwJNYsr6JeQF4nTYxtowaGeJuv4FMb6Z6EeglqUcq6I8KdMFWxUG7gzsBN7GEHT4LIU5XwMLfmuu46bKa562S3EmVUYJtwZQ/p.png" />
                    </a>
                </div>
                <div class="eight columns">
                    <blockquote>
                        [Rust’s] properties make it easy to embed the DivANS codec in a
                        webpage with WASM, as shown above.
                    </blockquote>
                    <p class="attribution">
                        &ndash; Daniel Reiter Horn and Jongmin Baek,
                        <a href="https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/">
                            Building Better Compression Together with DivANS
                        </a>
                    </p>
                </div>
            </div>
            <div class="testimonial row">
                <div class="eight columns">
                    <blockquote>
                        The JavaScript implementation [of the <code>source-map</code> library]
                        has accumulated convoluted code in the name of performance, and we
                        replaced it with idiomatic Rust. Rust does not force us to choose
                        between clearly expressing intent and runtime performance.
                    </blockquote>
                    <p class="attribution">
                        &ndash; Nick Fitzgerald,
                        <a href="https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/">
                            Oxidizing Source Maps with Rust and WebAssembly
                        </a>
                    </p>
                </div>
                <div class="four columns">
                    <a href="https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/" style="display: block;">
                        <img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/first.pause_.at_.exception.scalajs.png" />
                    </a>
                </div>
            </div>
            <div class="testimonial row">
                <div class="four columns">
                    <a href="https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/">
                        <img src="https://mntio.files.wordpress.com/2018/07/gutenberg_logo.png" />
                    </a>
                </div>
                <div class="eight columns">
                    <blockquote>
                        The Rust part for WebAssembly plus the Javascript part totals 313
                        lines of code. This is a tiny surface of code to review and to
                        maintain compared to writing a Javascript parser from scratch… The
                        WebAssembly binary is in average 86 times faster than the actual
                        Javascript implementation… So not only it is safer, but it is faster
                        than Javascript in this case. And it is only 300 lines of code.
                    </blockquote>
                    <p class="attribution">
                        &ndash; Ivan Enderlin,
                        <a href="https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/">
                            Parsing the WordPress Gutenberg Post Format in Rust and WebAssembly
                        </a>

                    </p>
                </div>
            </div>
        </div>
    </div>
</section>